{{- $raw := .Values.skeletoncache.tag | default .Chart.AppVersion -}}
{{- $tag := ternary $raw (printf "v%s" $raw) (hasPrefix "v" $raw) -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: skeletoncache
spec:
  selector:
    matchLabels:
      app: skeletoncache
  template:
    metadata:
      labels:
        app: skeletoncache
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum | quote }}
        checksum/secrets: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum | quote }}
    spec:
      tolerations:
        - key: "pool"
          operator: "Equal"
          value: "{{ .Values.cluster.meshPool }}"
          effect: "NoSchedule"
      nodeSelector:
        cloud.google.com/gke-nodepool: {{ .Values.cluster.meshPool }}
      terminationGracePeriodSeconds: 10
      containers:
        - name: skeletoncache
          image: {{ .Values.cluster.dockerRegistry }}/skeletoncache:{{ $tag }}
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
          envFrom:
            - configMapRef:
                name: skeletoncache-config
          env:
            - name: GLOBAL_SERVER_URL
              value: {{ required "A valid .cluster.globalServer is required!" .Values.cluster.globalServer }}
            - name: AUTH_URI
              value: {{ required "A valid .cluster.globalServer is required!" .Values.cluster.globalServer }}/auth
            - name: STICKY_AUTH_URL
              value: {{ required "A valid .cluster.globalServer is required!" .Values.cluster.globalServer }}/sticky_auth
            - name: AUTH_URL
              value: {{ required "A valid .cluster.globalServer is required!" .Values.cluster.globalServer }}/auth
            - name: INFO_URL
              value: {{ required "A valid .cluster.globalServer is required!" .Values.cluster.globalServer }}/info
            - name: LIMITER_URI
              value: {{ .Values.skeletoncache.limiter.uri | quote }}
            - name: LIMITER_CATEGORIES
              value: {{ if .Values.skeletoncache.limiter.categories }}{{ .Values.skeletoncache.limiter.categories | squote }}{{ else }}{{- $cat := dict -}}{{- range $k, $v := .Values.skeletoncache.limits }}{{- $_ := set $cat $k (printf "%v/minute" $v) -}}{{- end -}}{{ toJson $cat | squote }}{{ end }}
            - name: SKELETON_DATASTACK_NAME_REMAPPING
              value: {{ .Values.skeletoncache.datastackRemap | quote }}
            - name: SKELETONCACHE_WORKER_MAX_REPLICAS
              value: {{ .Values.skeletoncache.worker.maxReplicas | quote }}
            - name: SKELETON_CACHE_LOW_PRIORITY_EXCHANGE
              value: {{ .Values.skeletoncache.exchanges.low | default "" | quote }}
            - name: SKELETON_CACHE_HIGH_PRIORITY_EXCHANGE
              value: {{ .Values.skeletoncache.exchanges.high | default "" | quote }}
            - name: SKELETON_CACHE_LOW_PRIORITY_RETRIEVE_QUEUE
              value: {{ required "A valid .skeletoncache.queues.low is required!" .Values.skeletoncache.queues.low | quote }}
            - name: SKELETON_CACHE_HIGH_PRIORITY_RETRIEVE_QUEUE
              value: {{ required "A valid .skeletoncache.queues.high is required!" .Values.skeletoncache.queues.high | quote }}
            - name: SKELETON_CACHE_DEAD_LETTER_RETRIEVE_QUEUE
              value: {{ required "A valid .skeletoncache.queues.deadLetter is required!" .Values.skeletoncache.queues.deadLetter | quote }}
            - name: CACHE_NON_H5_SKELETONS
              value: {{ .Values.skeletoncache.cacheNonH5 | quote }}
            - name: VERBOSE_LEVEL
              value: {{ .Values.skeletoncache.verboseLevel | quote }}
            - name: DEBUG_ROOT_ID
              value: {{ .Values.skeletoncache.debugRootId | default "0" | quote }}
          resources:
            requests:
              memory: {{ .Values.skeletoncache.api.resources.requests.memory }}
              cpu: {{ .Values.skeletoncache.api.resources.requests.cpu }}
          volumeMounts:
            - name: skeleton-config-volume
              mountPath: /app/skeletoncache/app/instance/
          {{- if .Values.skeletoncache.credentialsSecret }}
            - name: google-cloud-key
              mountPath: /home/nginx/.cloudvolume/secrets
          {{- end }}
          readinessProbe:
            httpGet:
              path: /skeletoncache/health
              port: 80
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 60
          livenessProbe:
            httpGet:
              path: /skeletoncache/health
              port: 80
            initialDelaySeconds: 15
            timeoutSeconds: 1
            periodSeconds: 60
        - name: sysctl-buddy
          image: alpine:3.4
          command:
            - /bin/sh
            - -c
            - |
              while true; do
                sysctl -w net.core.somaxconn=32768
                sysctl -w net.ipv4.ip_local_port_range='1024 65535'
                sleep 100
              done
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
          resources:
            requests:
              memory: 10Mi
              cpu: 5m
      volumes:
        - name: skeleton-config-volume
          configMap:
            name: skeletoncache-config
      {{- if .Values.skeletoncache.credentialsSecret }}
        - name: google-cloud-key
          secret:
            secretName: {{ .Values.skeletoncache.credentialsSecret }}
      {{- end }}
